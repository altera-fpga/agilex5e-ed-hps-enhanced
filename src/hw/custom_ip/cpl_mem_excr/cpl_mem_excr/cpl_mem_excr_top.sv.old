module cpl_mem_excr_top #(
    parameter NUM_TG    = 1,
    parameter PL_EMIF   = 1,
    parameter ADDR_W    = 15,
    parameter DATA_W    = 32,
    parameter BURST_W   = 1,
    parameter BE_W		= 4,
    parameter AVMM_ADDR_WIDTH = 15,
    parameter AVMM_DATA_WIDTH = 32,
    parameter AXI4_ADDR_WIDTH = 33,
    parameter AXI4_DATA_WIDTH = 256,
    parameter ID_W_WIDTH = 7,
    parameter USER_REQ_WIDTH  = 1,
    parameter USER_RESP_WIDTH = 2,
    parameter USER_DATA_WIDTH = 1,
    parameter AXI4L_ADDR_WIDTH = 15,
    parameter AXI4L_DATA_WIDTH = 32,
    parameter AXI4L_RRESP_WIDTH = 2,
    parameter AXI4L_WSTRB_WIDTH = 4,
    parameter AXI4L_BRESP_WIDTH = 2

) (
    input   logic                   clk, //clk
    input   logic                   rst_n,

    // memtg csr interface avmm
    input   logic                           tg_cfg_clk,
    input   logic                           tg_cfg_rst_n,
    input   logic   [AVMM_ADDR_WIDTH-1:0]   avmm_slv_address,
    input   logic   [AVMM_DATA_WIDTH-1:0]   avmm_slv_writedata,
    input   logic                           avmm_slv_read,
    input   logic                           avmm_slv_write,
    output  logic                           avmm_slv_readdatavalid,
    output  logic                           avmm_slv_waitrequest,
    output  logic   [AVMM_DATA_WIDTH-1:0]   avmm_slv_readdata,

    // EMIF AXI Data interface
    output  logic   [ID_W_WIDTH-1:0]        emif_axi_awid,
    output  logic   [AXI4_ADDR_WIDTH-1:0]   emif_axi_awaddr,
    output  logic                           emif_axi_awvalid,
    output  logic   [0:0]                   emif_axi_awuser,
    output  logic   [7:0]                   emif_axi_awlen,
    output  logic   [2:0]                   emif_axi_awsize,
    output  logic   [1:0]                   emif_axi_awburst,
    input   logic                           emif_axi_awready,
    output  logic   [0:0]                   emif_axi_awlock,
    output  logic   [3:0]                   emif_axi_awcache,
    output  logic   [2:0]                   emif_axi_awprot,
    output  logic   [ID_W_WIDTH-1:0]        emif_axi_arid,
    output  logic   [AXI4_ADDR_WIDTH-1:0]   emif_axi_araddr,
    output  logic                           emif_axi_arvalid,
    output  logic   [USER_DATA_WIDTH-1:0]   emif_axi_aruser,
    output  logic   [7:0]                   emif_axi_arlen,
    output  logic   [2:0]                   emif_axi_arsize,
    output  logic   [1:0]                   emif_axi_arburst,
    input   logic                           emif_axi_arready,
    output  logic   [0:0]                   emif_axi_arlock,
    output  logic   [3:0]                   emif_axi_arcache,
    output  logic   [2:0]                   emif_axi_arprot,
    output  logic   [AXI4_DATA_WIDTH-1:0]   emif_axi_wdata,
    output  logic   [USER_DATA_WIDTH-1:0]   emif_axi_wuser,
    output  logic   [AXI4_DATA_WIDTH/8-1:0] emif_axi_wstrb,
    output  logic                           emif_axi_wlast,
    output  logic                           emif_axi_wvalid,
    input   logic                           emif_axi_wready,
    input   logic   [ID_W_WIDTH-1:0]        emif_axi_bid,
    input   logic   [1:0]                   emif_axi_bresp,
    input   logic   [USER_DATA_WIDTH-1:0]   emif_axi_buser,
    input   logic                           emif_axi_bvalid,
    output  logic                           emif_axi_bready,
    input   logic   [AXI4_DATA_WIDTH-1:0]   emif_axi_rdata,
    input   logic   [1:0]                   emif_axi_rresp,
    input   logic   [USER_DATA_WIDTH-1:0]   emif_axi_ruser,
    input   logic                           emif_axi_rlast,
    input   logic                           emif_axi_rvalid,
    output  logic                           emif_axi_rready,
    input   logic   [ID_W_WIDTH-1:0]        emif_axi_rid,

    input   logic                           emif_usr_clk,
    input   logic                           emif_usr_rst_n
);


    // mem tg2 top instance
    mem_tg2_top #(
        .NUM_TG (NUM_TG ),
        .PL_EMIF(PL_EMIF),
        .ADDR_W (ADDR_W ),
        .DATA_W (DATA_W ),
        .BURST_W(BURST_W),
        .AXI4_ADDR_WIDTH(AXI4_ADDR_WIDTH),
        .AXI4_DATA_WIDTH(AXI4_DATA_WIDTH),
        .ID_W_WIDTH(ID_W_WIDTH),
        .USER_REQ_WIDTH(USER_REQ_WIDTH),
        .USER_RESP_WIDTH(USER_RESP_WIDTH),
        .BE_W   (BE_W	)
    ) mem_tg2_inst (
        .clk                         (clk),
        .rst_n                       (rst_n),

        .tg_cfg_clk                  (tg_cfg_clk),
        .tg_cfg_rst_n                (tg_cfg_rst_n),

        .tg_cfg_readdatavalid        (avmm_slv_readdatavalid),
        .tg_cfg_readdata             (avmm_slv_readdata),
        .tg_cfg_waitrequest          (avmm_slv_waitrequest),
        .tg_cfg_write                (avmm_slv_write),
        .tg_cfg_writedata            (avmm_slv_writedata),
        .tg_cfg_read                 (avmm_slv_read),
        .tg_cfg_address              (avmm_slv_address),

        .emif_usr_clk       ( emif_usr_clk ),
        .emif_usr_rst_n     ( emif_usr_rst_n ),
        .emif_axi_awid      ( emif_axi_awid ),
        .emif_axi_awaddr    ( emif_axi_awaddr ),
        .emif_axi_awvalid   ( emif_axi_awvalid ),
        .emif_axi_awuser    ( emif_axi_awuser ),
        .emif_axi_awlen     ( emif_axi_awlen ),
        .emif_axi_awsize    ( emif_axi_awsize ),
        .emif_axi_awburst   ( emif_axi_awburst ),
        .emif_axi_awready   ( emif_axi_awready ),
        .emif_axi_awlock    ( emif_axi_awlock ),
        .emif_axi_awcache   ( emif_axi_awcache ),
        .emif_axi_awprot    ( emif_axi_awprot ),

        .emif_axi_arid      ( emif_axi_arid ),
        .emif_axi_araddr    ( emif_axi_araddr ),
        .emif_axi_arvalid   ( emif_axi_arvalid ),
        .emif_axi_aruser    ( emif_axi_aruser ),
        .emif_axi_arlen     ( emif_axi_arlen ),
        .emif_axi_arsize    ( emif_axi_arsize ),
        .emif_axi_arburst   ( emif_axi_arburst ),
        .emif_axi_arready   ( emif_axi_arready ),
        .emif_axi_arlock    ( emif_axi_arlock ),
        .emif_axi_arcache   ( emif_axi_arcache ),
        .emif_axi_arprot    ( emif_axi_arprot ),

        .emif_axi_wdata     ( emif_axi_wdata ),
        .emif_axi_wuser     ( emif_axi_wuser ),
        .emif_axi_wstrb     ( emif_axi_wstrb ),
        .emif_axi_wlast     ( emif_axi_wlast ),
        .emif_axi_wvalid    ( emif_axi_wvalid ),
        .emif_axi_wready    ( emif_axi_wready ),

        .emif_axi_bid       ( emif_axi_bid ),
        .emif_axi_bresp     ( emif_axi_bresp ),
        .emif_axi_buser     ( emif_axi_buser ),
        .emif_axi_bvalid    ( emif_axi_bvalid ),
        .emif_axi_bready    ( emif_axi_bready ),
        .emif_axi_rdata     ( emif_axi_rdata ),
        .emif_axi_rresp     ( emif_axi_rresp ),
        .emif_axi_ruser     ( emif_axi_ruser ),
        .emif_axi_rlast     ( emif_axi_rlast ),
        .emif_axi_rvalid    ( emif_axi_rvalid ),
        .emif_axi_rready    ( emif_axi_rready ),
        .emif_axi_rid       ( emif_axi_rid )
    );



endmodule
